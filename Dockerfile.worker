FROM rust:1.85-slim-bookworm AS worker-builder
WORKDIR /build
RUN apt-get update && apt-get install -y git libssl-dev pkg-config
COPY . .
RUN --mount=type=cache,target=/build/target/ \
    --mount=type=cache,target=/usr/local/cargo/git/db \
    --mount=type=cache,target=/usr/local/cargo/registry/ \
    cargo build --bin stroem-worker --bin stroem-runner --bin stroem --release \
    && mkdir -p /build/dist \
    && cp /build/target/release/stroem-worker /build/dist/ \
    && cp /build/target/release/stroem-runner /build/dist/ \
    && cp /build/target/release/stroem /build/dist/


FROM debian:bookworm-slim AS tools
ARG SOPS_VERSION="3.10.1"
ARG VALS_VERSION="0.40.1"
ARG KUBECTL_VERSION="1.28.7"
ARG HELM_VERSION="3.14.3"
ARG HELM_PLUGIN_DIFF_VERSION="3.10.0"
ARG HELM_PLUGIN_SECRETS_VERSION="4.6.3"
ARG HELM_PLUGIN_S3_VERSION="0.16.3"
ARG HELM_PLUGIN_GIT_VERSION="1.3.0"
ARG HELMFILE_VERSION="0.171.0"
ARG TERRAFORM_VERSION="1.11.3"
ARG PYTHON_VERSION="3.12"

RUN apt-get update \
    && apt-get install -y --no-install-recommends tzdata ca-certificates libssl-dev git curl sudo jq unzip \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install SOPS
RUN set -eux \
    && arch="$(dpkg --print-architecture)"; arch="${arch##*-}" \
    && SOPS_FILENAME=sops-v${SOPS_VERSION}.linux.${arch} \
    && curl --retry 5 --retry-connrefused -LO "https://github.com/mozilla/sops/releases/download/v${SOPS_VERSION}/${SOPS_FILENAME}" \
    && chmod +x "${SOPS_FILENAME}" \
    && sudo mv "${SOPS_FILENAME}" /usr/local/bin/sops \
    && sops --version | grep -E "^sops ${SOPS_VERSION}"

# Install vals
RUN set -eux \
    && arch="$(dpkg --print-architecture)"; arch="${arch##*-}" \
    && VALS_FILENAME="vals_${VALS_VERSION}_linux_${arch}.tar.gz" \
    && curl --retry 5 --retry-connrefused -LO "https://github.com/helmfile/vals/releases/download/v${VALS_VERSION}/${VALS_FILENAME}" \
    && sudo tar xvf "${VALS_FILENAME}" -C /usr/local/bin vals \
    && rm "${VALS_FILENAME}" \
    && vals version | grep -E "^Version: ${VALS_VERSION}"

# kubectl
RUN set -eux \
    && arch="$(dpkg --print-architecture)"; arch="${arch##*-}" \
    && curl -LO "https://dl.k8s.io/release/v${KUBECTL_VERSION}/bin/linux/$arch/kubectl" \
    && install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl \
    && [ "$(kubectl version -o json | jq -r '.clientVersion.gitVersion')" = "${KUBECTL_VERSION}" ] \

# helm
RUN set -eux \
    && arch="$(dpkg --print-architecture)"; arch="${arch##*-}" \
    && HELM_FILENAME=helm-v${HELM_VERSION}-linux-${arch}.tar.gz \
    && curl --retry 5 --retry-connrefused -LO "https://get.helm.sh/${HELM_FILENAME}" \
    && sudo tar xvf "${HELM_FILENAME}" -C /usr/local/bin --strip-components 1 linux-${arch}/helm \
    && rm "${HELM_FILENAME}" \
    && [ "$(helm version --template '{{.Version}}')" = "v${HELM_VERSION}" ]
RUN set -eux \
    && helm plugin install https://github.com/databus23/helm-diff --version v${HELM_PLUGIN_DIFF_VERSION} \
    && helm plugin install https://github.com/jkroepke/helm-secrets --version v${HELM_PLUGIN_SECRETS_VERSION} \
    && helm plugin install https://github.com/hypnoglow/helm-s3 --version v${HELM_PLUGIN_S3_VERSION} \
    && helm plugin install https://github.com/aslafy-z/helm-git --version v${HELM_PLUGIN_GIT_VERSION}


# helmfile
RUN set -eux \
    && arch="$(dpkg --print-architecture)"; arch="${arch##*-}" \
    && HELMFILE_FILENAME="helmfile_${HELMFILE_VERSION}_linux_${arch}.tar.gz" \
    && curl --retry 5 --retry-connrefused -LO "https://github.com/helmfile/helmfile/releases/download/v${HELMFILE_VERSION}/${HELMFILE_FILENAME}" \
    && sudo tar xvf "${HELMFILE_FILENAME}" -C /usr/local/bin helmfile \
    && rm "${HELMFILE_FILENAME}" \
    && helmfile --version | grep -E "^helmfile version ${HELMFILE_VERSION}" \

# Terraform
RUN set -eux \
    && arch="$(dpkg --print-architecture)"; arch="${arch##*-}" \
    && TERRAFORM_FILENAME="terraform_${TERRAFORM_VERSION}_linux_${arch}.zip" \
    && curl --retry 5 --retry-connrefused -LO "https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/${TERRAFORM_FILENAME}" \
    && unzip ${TERRAFORM_FILENAME} \
    && install -o root -g root -m 0755 terraform /usr/local/bin/terraform \
    && rm ${TERRAFORM_FILENAME}

# UV
RUN curl -LsSf https://astral.sh/uv/install.sh | sh && mv /root/.local/bin/uv /usr/local/bin/uv

# Python
RUN uv python install ${PYTHON_VERSION}

# Ansible
RUN uv tool install ansible # --with

# awscli
RUN uv tool install git+https://github.com/aws/aws-cli.git@v2


FROM tools

WORKDIR /app

RUN groupadd -g 1000 -r stroem && useradd -r -g stroem -u 1000 -d /app stroem
RUN mkdir -p /var/lib/stroem/workspace && chown -R stroem:stroem /var/lib/stroem
RUN mkdir -p /tmp/workspace && chown -R stroem:stroem /tmp/workspace

COPY --from=worker-builder /build/dist/* ./

VOLUME /var/lib/stroem/workspace
VOLUME /tmp/workspace
USER stroem:stroem
ENTRYPOINT ["/app/stroem-worker"]
CMD ["--server", "localhost"]